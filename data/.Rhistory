files <- dir( path = dataDirectory, pattern = CAge, recursive = TRUE )
files <- dir( path = dataDirectory, pattern = "CAge", recursive = TRUE )
files
library( ANTsR )
?antsPreprocessfMRI
?antsImageClone
?antsPreprocessfMRI
?timeseries2matrix
dataDirectory <- '/Users/ntustison/Data/TonyFiliano/Nifti/'
files <- dir( path = dataDirectory, pattern = "CAge", recursive = TRUE )
maskFiles <- dir( path = dataDirectory, pattern = "waxholmLabels", recursive = TRUE )
maskFiles[1[]
maskFiles[1}
maskFiles[1]
i <- 1
boldImages <- list()
labelImages <- list()
boldImages[[i]] <- antsImageRead( paste0( dataDirectory, files[i] ), dim = 4, "float" )
labelImages[[i]] <- antsImageRead( paste0( dataDirectory, maskFiles[i] ), dim = 3, "unsigned int" )
maskImage <- antsImageClone( labelImages[[i]], "unsigned int" )
maskImage[maskImage != 0] <- 1
boldMatrix <- timeseries2matrix( boldImages[[i]], maskImage )
labelArray <- as.array( labelImages[[i]] )
uniqueLabels <- unique( labelArray != 0 )
uniqueLabels
length( labelArray )
uniqueLabels <- unique( labelArray )
uniqueLabels
dim( labelArray )
uniqueLabels <- sort( unique( labelArray[labelArray > 0] ) )
uniqueLabels
dim( boldMatrx )
dim( boldMatrix )
length( as.vector( labelArray ))
length( as.vector( labelArray != 0 ))
length( as.vector( labelArray[labelArray != 0] ))
labelVector <- as.vector( as.array( labelImages[[i]][labelImages[[i]] > 0] ) )
length( labelVector )
uniqueLabels <- sort( unique( labelVector ) )
uniqueLabels
?matrix
j <- 1
currentLabelVector <- labelVector == uniqueLabels[j]
currentLabelVector
k <- 1
boldMatrix[k,]
dim( labelVector )
length( labelVector )
boldLabelMatrix[k, j] <- mean( boldMatrix[k,][labelVector == uniqueLabels[j]] );
boldLabelMatrix <- matrix( NA, nrow = nrow( boldMatrix ), ncol = length( uniqueLabels ) )
for( j in 1:length( uniqueLabels ) )
{
for( k in 1:nrow( boldLabelMatrix ) )
{
boldLabelMatrix[k, j] <- mean( boldMatrix[k,][labelVector == uniqueLabels[j]] );
}
}
boldLabelMatrix
dim( boldLabelMatrix)
length( uniqueLabels )
uniqueLabels
which( labelVector == uniqueLabels[j] )
labelVector == uniqueLabels[j]
boldSubMatrix
boldSubMatrix
boldSubMatrix <- boldMatrix[, which( labelVector == uniqueLabels[j] )]
boldSubMatrix
meanRows( boldMatrix[, which( labelVector == uniqueLabels[j] )] )
rowMeans( boldMatrix[, which( labelVector == uniqueLabels[j] )] )
for( j in 1:length( uniqueLabels ) )
{
boldLabelMatrix[, j] <- rowMeans( boldMatrix[, which( labelVector == uniqueLabels[j] )] )
}
which( labelVector == uniqueLabels[j] )
boldMatrix[, which( labelVector == uniqueLabels[j] )]
j
currentLabelIndices <- which( labelVector == uniqueLabels[j] )
currentLabelIndices
currentLabelIndices <- which( labelVector == uniqueLabels[3] )
currentLabelIndices
boldLabelMatrix <- matrix( NA, nrow = nrow( boldMatrix ), ncol = length( uniqueLabels ) )
for( j in 1:length( uniqueLabels ) )
{
currentLabelIndices <- which( labelVector == uniqueLabels[j] )
if( length( currentLabelIndices > 1 ) )
{
boldLabelMatrix[, j] <- rowMeans( boldMatrix[, currentLabelIndices] )
}
else
{
boldLabelMatrix[, j] <- mean( boldMatrix[, currentLabelIndices] )
}
}
j
currentLabelIndices
boldLabelMatrix <- matrix( NA, nrow = nrow( boldMatrix ), ncol = length( uniqueLabels ) )
for( j in 1:length( uniqueLabels ) )
{
currentLabelIndices <- which( labelVector == uniqueLabels[j] )
if( length( currentLabelIndices ) > 1 )
{
boldLabelMatrix[, j] <- rowMeans( boldMatrix[, currentLabelIndices] )
}
else
{
boldLabelMatrix[, j] <- mean( boldMatrix[, currentLabelIndices] )
}
}
boldLabelMatrix
ndim( boldLabelMatrix)
dim( boldLabelMatrix)
corrMat <- cor( t( boldLabelMatrix ), t( boldLabelMatrix ) )
corrMat
dim( corrMat )
corrMat <- cor( boldLabelMatrix, boldLabelMatrix )
corrMat <- cor( t( boldLabelMatrix ), t( boldLabelMatrix ) )
corrMat <- cor( boldLabelMatrix, boldLabelMatrix )
dim( boldLabelMatrix)
dim( corrMat )
corrMat
which( is.na( corrMat )
)
?which
which( is.na( corrMat ), arr.ind = TRUE )
?cor
?corr
library( boot )
?corr
?makeGraph
makeGraph
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
networkGraph$effinv
networkGraph$degcent
networkGraph$strength
networkGraph$localtransitivity
networkGraph$betweeness
networkGraph$degree
networkGraph$pagerank
networkGraph$closeness
networkGraph$centrality
networkGraph$localtransitivity
networkGraph$myGraph
networkGraph$mygraph
average.path.length( networkGraph$mygraph )
alpha.centrality( networkGraph$mygraph )
graph.knn( networkGraph$mygraph )
mean( closeness( networkGraph$mygraph ) )
mean( closeness( networkGraph$mygraph ), na.rm = TRUE )
networkGraph$centrality
networkGraph$closeness
networkGraph$pagerank
networkGraph$degree
networkGraph$betweeness
networkGraph$localtransitivity
networkGraph$strength
networkGraph$degcent
networkGraph$effinv
networkGraph$walktrapcomm
mean( networkGraph$walktrapcomm )
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
networkGraph$community
networkGraph$community
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
?antsPreprocessfMRI
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
?ImageMath
ImageMath( 4, boldImages[[1]], "G", boldImages[[1]], "0.4x0.4x0.4x0")
boldMatrix <- timeseries2matrix( boldImages[[i]], maskImage )
library( ANTsR )
library( igraph )
dataDirectory <- '/Users/ntustison/Data/TonyFiliano/Nifti/'
files <- dir( path = dataDirectory, pattern = "CAge", recursive = TRUE )
maskFiles <- dir( path = dataDirectory, pattern = "waxholmLabels", recursive = TRUE )
boldImages <- list()
labelImages <- list()
i <- 1
boldImages[[i]] <- antsImageRead( paste0( dataDirectory, files[i] ), dim = 4, "float" )
labelImages[[i]] <- antsImageRead( paste0( dataDirectory, maskFiles[i] ), dim = 3, "unsigned int" )
maskImage <- antsImageClone( labelImages[[i]], "unsigned int" )
maskImage[maskImage != 0] <- 1
boldMatrix <- timeseries2matrix( boldImages[[i]], maskImage )
ImageMath( 4, boldImages[[1]], "G", boldImages[[1]], "0.4x0.4x0.4x0.4")
boldMatrix <- timeseries2matrix( boldImages[[i]], maskImage )
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
boldImages[[1]][50,41,8,1]
boldImages[[1]][50,41,8,2]
boldImages[[1]][50,41,8,3]
boldImages[[1]][50,41,8,4]
mean( boldImages[[1]][,,,] )
mean( boldImages[[1]][,,,1] )
mean( boldImages[[1]][1,1,1,1] )
mean( boldImages[[1]][,1,1,1] )
mean( boldImages[[1]][1,1,1,1] )
boldImages[[1]][50,41,8,4]
boldImages[[1]][50,41,8,5]
boldImages[[1]][50,41,8,6]
boldImages[[1]][50,41,8,7]
boldImages[[i]] <- antsImageRead( paste0( dataDirectory, files[i] ), dim = 4, "float" )
maskImage <- antsImageClone( labelImages[[i]], "unsigned int" )
maskImage[maskImage != 0] <- 1
ImageMath( 4, boldImages[[1]], "G", boldImages[[1]], "0.5x0.5x0.5x0" )
boldImages[[1]][50,41,8,6]
boldMatrix <- timeseries2matrix( boldImages[[i]], maskImage )
ImageMath( 4, boldImages[[1]], "G", boldImages[[1]], "0.4x0.4x0.4x0" )
boldImages[[i]] <- antsImageRead( paste0( dataDirectory, files[i] ), dim = 4, "float" )
> maskImage <- antsImageClone( labelImages[[i]], "unsigned int" )
> maskImage[maskImage != 0] <- 1
ImageMath( 4, boldImages[[1]], "G", boldImages[[1]], "0.4x0.4x0.4x0" )
boldMatrix <- timeseries2matrix( boldImages[[i]], maskImage )
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
boldImages[[1]][50,41,8,6]
boldImages[[i]] <- antsImageRead( paste0( dataDirectory, files[i] ), dim = 4, "float" )
labelImages[[i]] <- antsImageRead( paste0( dataDirectory, maskFiles[i] ), dim = 3, "unsigned int" )
maskImage <- antsImageClone( labelImages[[i]], "unsigned int" )
maskImage[maskImage != 0] <- 1
cleanBoldImage <- boldImages[[i]]
sigmaVector <- "0.42x0.42x0.42x0"
ImageMath( 4, cleanBoldImage, "G", cleanBoldImage, sigmaVector )
cleanBoldImage[50,41,8,6]
boldMatrix <- timeseries2matrix( boldImages[[i]], maskImage )
boldImages[[i]] <- antsImageRead( paste0( dataDirectory, files[i] ), dim = 4, "float" )
labelImages[[i]] <- antsImageRead( paste0( dataDirectory, maskFiles[i] ), dim = 3, "unsigned int" )
maskImage <- antsImageClone( labelImages[[i]], "unsigned int" )
maskImage[maskImage != 0] <- 1
boldImage <- boldImages[[i]]
boldMatrix <- timeseries2matrix( boldImage, maskImage )
boldResiduals <- residuals( lm( boldMatrix ~ 1 + nuisanceVariables ) )
boldResidualsFiltered <- boldResiduals
nuisanceVariables <- matrix( NA, nrow = 0, ncol = 0 )
is.na( nuisanceVariables)
is.na( nuisanceVariables)[1]
is.na( nuisanceVariables[1])
boldMatrix <- timeseries2matrix( boldImage, maskImage )
if( is.na( nuisanceVariables[1] ) )
{
boldResiduals <- boldMatrix
} else {
boldResiduals <- residuals( lm( boldMatrix ~ 1 + nuisanceVariables ) )
}
boldResidualsFiltered <- boldResiduals
cleanBoldImage <- matrix2timeseries( boldImage, maskImage, boldResidualsFiltered )
ImageMath( 4, cleanBoldImage, "G", cleanBoldImage, sigmaVector )
cleanBoldImage[50,41,8,6]
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
boldImage[[1[50,41,8,6]
q
boldImage[[1]][50,41,8,6]
boldImages[[1]][50,41,8,6]
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
source( "/Users/ntustison/Data/TonyFiliano/Scripts/calculateConnectivityMeasures.R")
ImageMath( 4, boldImages[[1]], "PeronaMalik", boldImages[[1]] )
ImageMath()
ImageMath( 4 )
ImageMath( 4, boldImages[[1]], "G", boldImages[[1]], 1 )
source( "/Users/ntustison/Data/TonyFiliano/Scripts/groupICA.R")
numberOfBoldImages <- length( boldImages )
i <- 1
subjectBoldMatrix <- timeseries2matrix( boldImages[[i]], mask )
dim( subjectBoldMatrix)
q <- icawhiten( subjectBoldMatrix, 40, TRUE )
dim( q )
source( "/Users/ntustison/Data/TonyFiliano/Scripts/groupICA.R")
icaResults <- antsSpatialICAfMRI( boldImages, maskImage = mask, numberOfICAComponents = 40, normalizeComponentImages = TRUE )
icaResults
source( "/Users/ntustison/Data/TonyFiliano/Scripts/groupICA.R")
library( ANTsR )
update.packages( checkBuilt = TRUE, ask = FALSE )
?update.packages
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("codetools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("compiler", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("manipulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("Matrix", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("mgcv", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("nlme", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("nnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("parallel", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("spatial", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("splines", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("stats4", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("survival", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("Rcpp")
install.packages(pkgs = c("Rcpp", "signal", "timeSeries", "mFilter", "doParallel", "robust", "magic", "knitr", "pixmap", "rgl", "misc3d"), dependencies = TRUE);
install.packages( "fastICA")
239 / 255
213 / 255
205 / 255
133/ 255
63 / 255
210 / 255
180 / 255
140 / 255
102 / 255
205 / 255
170 / 255
128 / 255
139 / 255
46 / 255
87 / 255
370167 + 458047
1.10274e+06 + 1.08678e+06
534680 / ( 534680 + 1.4885e6 )
install.packages( "oro.pet", dependencies = TRUE )
dataDirectory <- '/Users/ntustison/Data/TonyFiliano/Nifti/'
files <- dir( path = dataDirectory, pattern = "ep2dbold", recursive = TRUE )
files <- append( files, dir( path = dataDirectory, pattern = "bold16slices", recursive = TRUE ) )
maskFiles <- dir( path = dataDirectory, pattern = "TonyWaxholmLabels", recursive = TRUE )
dataDirectory
files
maskFiles
files
dataDirectory <- '/Users/ntustison/Data/TonyFiliano/Nifti/'
files <- dir( path = dataDirectory, pattern = "ep2dbold", recursive = TRUE )
maskFiles <- dir( path = dataDirectory, pattern = "TonyWaxholmLabels", recursive = TRUE )
files
maskFiles
?append
?quantile
?rand
?unif
x <- 1:10
q <- quantiles( x, probs = c( 0.05, 0.10, 0.90, 0.95 ), na.rm = TRUE )
q <- quantile( x, probs = c( 0.05, 0.10, 0.90, 0.95 ), na.rm = TRUE )
q
q[1]
q <- quantile( x, probs = c( 0.05, 0.10, 0.90, 0.95 ), na.rm = TRUE, names = FALSE )
q[1]
?write.csv
?lm
simple_roi_analysis
library( ANTsR )
?simple_roi_analysis
?t.test
?wilcox.test
m <- c( 0.6486486486486471, 1.2317435094953881, 0.08911964842360429, 0.5405405405405407, 0.4084038335906146, 0.09102735053678356, 3.53641937537427e-15, -2.8937847265492493, 0.5574865209663075)
?reshape
?as.matrix
ma <- as.matrix( m, nrow = 3, ncol = 3, byrow = T )
ma
ma <- matrix( m, nrow = 3, ncol = 3, byrow = T )
ma
det( ma )
m <- c( 0.12162162162161828, 0.3267293544088729, 0.070678494955247, 0.8648648648648652, 0.12496372176576774, 0.0217211944471059, -5.3753574505688905e-15, -2.2878889574222905, 0.6740178095002272 )
ma <- matrix( m, nrow = 3, ncol = 3, byrow = T )
det( ma )
det( ma.t() )
det( t( ma ) )
m <- c( 0.1216216216216216, -0.0036119486702028032, 0.04280159174182341, 0.8648648648648648, -0.0009364311367236859, 0.011096708970101954, -1.6934266493312197e-16, -0.07265463416358753, 0.860957414838516, 8.286150008440018, 7.654249995946886, -0.3501625061035174 )
ma <- matrix( m, nrow = 3, ncol = 3, byrow = T )
ma
det( ma )
t <- read.csv( "~/Desktop/intensity505.txt")
t
myplot <- ggplot( t, aes( x=t$slice, y=t$intensity )) + geom_point( shape = 1 ) + geom_smooth( method=lm )
library( ggplot2 )
myplot <- ggplot( t, aes( x=t$slice, y=t$intensity )) + geom_point( shape = 1 ) + geom_smooth( method=lm )
ggplot( t, aes( x=t$slice, y=t$intensity )) + geom_point( shape = 1 ) + geom_smooth( method=lm )
649.463 + -3.97158 * 49
install.packages( ggplot2 )
install.packages( "ggplot2" )
library( ANTsR )
antsImageREad
antsImageRead
install.packages( "igraph")
install.packages( "corrplot" )
install.packages( "mFilter" )
17.6 / 40
3.5 / 0.44
library( ANTsR )
?getNeighborhoodInMask
r16 <- getANTsRData("r16")
r16 <- antsImageRead(r16,2)
mask <- getMask(r16,lowThresh=mean(r16),cleanup=1)
radius <- rep(2,2)
radius
r16 <- getANTsRData("r16")
r16 <- antsImageRead(r16,2)
mask <- getMask(r16,lowThresh=mean(r16),cleanup=1)
radius <- rep(2,)
r16 <- getANTsRData("r16")
r16 <- antsImageRead(r16,2)
mask <- getMask(r16,lowThresh=mean(r16),cleanup=1)
radius <- rep(2,1)
radius
r16 <- getANTsRData("r16")
r16 <- antsImageRead(r16,2)
mask <- getMask(r16,lowThresh=mean(r16),cleanup=1)
radius <- rep(1,2)
mat <- getNeighborhoodInMask(r16,mask,radius)
mat
mat[,1:10]
r16 <- getANTsRData("r16")
r16 <- antsImageRead(r16,2)
mask <- getMask(r16,lowThresh=mean(r16),cleanup=1)
radius <- rep(0,2)
radius
mat <- getNeighborhoodInMask(r16,mask,radius)
mat[,1:10]
23 * 25
23 * 24
library( ggplot2 )
stage1 <- read.csv( "/Users/ntustison/Data/Stone/LesionSegmentation/labelOverlapStage1.csv" )
stage2 <- read.csv( "/Users/ntustison/Data/Stone/LesionSegmentation/labelOverlapStage2.csv" )
diceValues <- data.frame( Stage = c( rep( "Stage1", nrow( stage1 ) ), rep( "Stage2", nrow( stage2 ) ) ),
Dice =  c( stage1$Dice, stage2$Dice )
)
diceValues
library( ggplot2 )
stage1 <- read.csv( "/Users/ntustison/Data/Stone/LesionSegmentation/labelOverlapStage1.csv" )
stage2 <- read.csv( "/Users/ntustison/Data/Stone/LesionSegmentation/labelOverlapStage2.csv" )
diceValues <- data.frame( Subject = c( stage1$Subject, stage2$Subject ),
Stage = as.factor( c( rep( "Stage 1", nrow( stage1 ) ), rep( "Stage 2", nrow( stage2 ) ) ) ),
Dice =  c( stage1$Dice, stage2$Dice )
)
vPlot <- ggplot( data = diceValues ) +
geom_boxplot( aes( x = Stage, y = Dice ), notch = TRUE ) +
scale_fill_manual( values = c( "darkred", "navyblue" ) ) +
theme( legend.position = "none" )
ggsave( file = "/Users/ntustison/Desktop/dice.pdf", plot = vPlot, width = 6, height = 6 )
library( ggplot2 )
stage1 <- read.csv( "/Users/ntustison/Data/Stone/LesionSegmentation/labelOverlapStage1.csv" )
stage2 <- read.csv( "/Users/ntustison/Data/Stone/LesionSegmentation/labelOverlapStage2.csv" )
diceValues <- data.frame( Subject = c( stage1$Subject, stage2$Subject ),
Stage = as.factor( c( rep( "Stage 1", nrow( stage1 ) ), rep( "Stage 2", nrow( stage2 ) ) ) ),
Dice =  c( stage1$Dice, stage2$Dice )
)
vPlot <- ggplot( data = diceValues ) +
geom_boxplot( aes( x = Stage, y = Dice, fill = Stage ), notch = TRUE ) +
scale_fill_manual( values = c( "darkred", "navyblue" ) ) +
theme( legend.position = "none" )
ggsave( file = "/Users/ntustison/Desktop/dice.pdf", plot = vPlot, width = 6, height = 6 )
vPlot <- ggplot( data = diceValues ) +
geom_boxplot( aes( x = Stage, y = Dice, colour = Stage ), notch = TRUE ) +
scale_fill_manual( values = c( "darkred", "navyblue" ) ) +
theme( legend.position = "none" )
ggsave( file = "/Users/ntustison/Desktop/dice.pdf", plot = vPlot, width = 6, height = 6 )
library( ggplot2 )
stage1 <- read.csv( "/Users/ntustison/Data/Stone/LesionSegmentation/labelOverlapStage1.csv" )
stage2 <- read.csv( "/Users/ntustison/Data/Stone/LesionSegmentation/labelOverlapStage2.csv" )
diceValues <- data.frame( Subject = c( stage1$Subject, stage2$Subject ),
Stage = as.factor( c( rep( "Stage 1", nrow( stage1 ) ), rep( "Stage 2", nrow( stage2 ) ) ) ),
Dice =  c( stage1$Dice, stage2$Dice )
)
vPlot <- ggplot( data = diceValues ) +
geom_boxplot( aes( x = Stage, y = Dice, colour = Stage ), notch = TRUE ) +
scale_colour_manual( values = c( "darkred", "navyblue" ) ) +
theme( legend.position = "none" )
ggsave( file = "/Users/ntustison/Desktop/dice.pdf", plot = vPlot, width = 6, height = 6 )
library( ggplot2 )
stage1 <- read.csv( "/Users/ntustison/Data/Stone/LesionSegmentation/labelOverlapStage1.csv" )
stage2 <- read.csv( "/Users/ntustison/Data/Stone/LesionSegmentation/labelOverlapStage2.csv" )
diceValues <- data.frame( Subject = c( stage1$Subject, stage2$Subject ),
Stage = as.factor( c( rep( "Stage 1", nrow( stage1 ) ), rep( "Stage 2", nrow( stage2 ) ) ) ),
Dice =  c( stage1$Dice, stage2$Dice )
)
vPlot <- ggplot( data = diceValues ) +
geom_boxplot( aes( x = Stage, y = Dice, fill = Stage ), alpha = 0.5, notch = TRUE ) +
scale_fill_manual( values = c( "darkred", "navyblue" ) ) +
theme( legend.position = "none" )
ggsave( file = "/Users/ntustison/Desktop/dice.pdf", plot = vPlot, width = 6, height = 6 )
source( "/Users/ntustison/Data/Stone/LesionSegmentation/Scripts/plotVariableImportance2.R")
source( "/Users/ntustison/Data/Stone/LesionSegmentation/Scripts/plotVariableImportance2.R")
source( "/Users/ntustison/Data/Stone/LesionSegmentation/Scripts/plotVariableImportance2.R")
8927-8765
8765 / 81
8765 / 81 / 24
29 * 28
?ggsave
library( ggplot2)
?ggsave
pwd
setwd( "/Users/ntustison/Data/CrossLong/data/")
library(ggplot2)
oasis_values <- read.csv( 'oasis-trt-20-surfaceArea.csv' )
oasis_values_rigid <- read.csv( 'oasis-trt-20-surfaceArea-rigid.csv' )
var_ratios <- read.csv( 'var_ratios_2.csv' )
mean_oasis <- colMeans( oasis_values[,2:ncol( oasis_values )] )
myDf <- data.frame( Oasis = mean_oasis, NormedVarRatios = var_ratios$normed )
mean_oasis
ggplot( data = myDf, aes( y = Oasis, x = NormedVarRatios ) ) +
geom_point() +
geom_smooth( method = lm, se = TRUE ) +
xlab( 'Var ratios (normed)' ) +
ylab( 'Oasis') + coord_fixed()
ggsave( '~/Desktop/correlationOasis.pdf', width = 5, height = 5)
var_ratios$normed
ggplot( data = myDf, aes( y = Oasis, x = NormedVarRatios ) ) +
geom_point() +
geom_smooth( method = lm, se = TRUE ) +
xlab( 'Var ratios (normed)' ) +
ylab( 'Oasis')
ggsave( '~/Desktop/correlationOasis.pdf', width = 5, height = 5)
